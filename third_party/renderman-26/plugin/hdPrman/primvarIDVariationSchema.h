//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#ifndef EXT_RMANPKG_PLUGIN_RENDERMAN_PLUGIN_HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_H
#define EXT_RMANPKG_PLUGIN_RENDERMAN_PLUGIN_HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_H

/// \file

#include "hdPrman/api.h"

#include "pxr/imaging/hd/schema.h"
#include "pxr/imaging/hd/version.h"

// --(BEGIN CUSTOM CODE: Includes)--

#include "pxr/imaging/hd/dataSourceTypeDefs.h"

#include "pxr/base/tf/staticTokens.h"

// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

// --(BEGIN CUSTOM CODE: Declares)--

/// \class HdPrmanPrimvarIDVariationSchemaCodes
/// A numerical code that's assigned to prims based on their type. The codes
/// are accumulated in the variationIdCodes primvar. 
enum class HdPrmanPrimvarIDVariationSchemaCodes {
    ASSEMBLY      = 100,
    COMPONENT     = 200,
    COMPONENTV    = 250,
    SUBCOMPONENT  = 300,
    SUBCOMPONENTV = 350,
    GPRIM         = 400
};

#define HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_RI_TOKENS \
    ((assemblyID, \
      "ri:attributes:user:assemblyID")) \
    ((componentID, \
      "ri:attributes:user:componentID")) \
    ((gprimID, \
      "ri:attributes:user:gprimID")) \
    ((subcomponentID, \
      "ri:attributes:user:subcomponentID"))

TF_DECLARE_PUBLIC_TOKENS(HdPrmanPrimvarIDVariationSchemaRiTokens, HDPRMAN_API,
                         HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_RI_TOKENS);

// --(END CUSTOM CODE: Declares)--

#define HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_TOKENS \
    (primvars) \
    (assemblyDepth) \
    (assemblyID) \
    (componentID) \
    (dustID) \
    (gprimID) \
    (hasIDVariation) \
    (subcomponentID) \
    (variationIdCodes) \

TF_DECLARE_PUBLIC_TOKENS(HdPrmanPrimvarIDVariationSchemaTokens, HDPRMAN_API,
    HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------


class HdPrmanPrimvarIDVariationSchema : public HdSchema
{
public:
    /// \name Schema retrieval
    /// @{

    HdPrmanPrimvarIDVariationSchema(HdContainerDataSourceHandle container)
      : HdSchema(container) {}

    /// Retrieves a container data source with the schema's default name token
    /// "primvars" from the parent container and constructs a
    /// HdPrmanPrimvarIDVariationSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    HDPRMAN_API
    static HdPrmanPrimvarIDVariationSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// @}

// --(BEGIN CUSTOM CODE: Schema Methods)--
    
    HDPRMAN_API
    HdIntDataSourceHandle GetAssemblyDepth() const;
    
    HDPRMAN_API
    HdIntDataSourceHandle GetAssemblyID() const;

    HDPRMAN_API
    HdIntArrayDataSourceHandle GetComponentID() const;

    HDPRMAN_API
    HdIntDataSourceHandle GetDustID() const;

    HDPRMAN_API
    HdIntDataSourceHandle GetGprimID() const;

    HDPRMAN_API
    HdSampledDataSourceHandle GetSubcomponentID() const;

    HDPRMAN_API
    HdFloatArrayDataSourceHandle GetVariationIdCodes() const;

    HDPRMAN_API
    HdBoolDataSourceHandle HasIDVariation() const;

// --(END CUSTOM CODE: Schema Methods)--

    /// \name Member accessor
    /// @{ 

    /// @}

    /// \name Schema location
    /// @{

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    HDPRMAN_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    HDPRMAN_API
    static const HdDataSourceLocator &GetDefaultLocator();

    /// @}

    /// \name Data source locators for members
    ///
    /// The following methods return an HdDataSourceLocator (relative to the
    /// prim-level data source) where the data source for a member can be found.
    ///
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    /// @{

    /// Prim-level relative data source locator to locate assemblyDepth.
    HDPRMAN_API
    static const HdDataSourceLocator &GetAssemblyDepthLocator();

    /// Prim-level relative data source locator to locate assemblyID.
    HDPRMAN_API
    static const HdDataSourceLocator &GetAssemblyIDLocator();

    /// Prim-level relative data source locator to locate componentID.
    HDPRMAN_API
    static const HdDataSourceLocator &GetComponentIDLocator();

    /// Prim-level relative data source locator to locate dustID.
    HDPRMAN_API
    static const HdDataSourceLocator &GetDustIDLocator();

    /// Prim-level relative data source locator to locate gprimID.
    HDPRMAN_API
    static const HdDataSourceLocator &GetGprimIDLocator();

    /// Prim-level relative data source locator to locate hasIDVariation.
    HDPRMAN_API
    static const HdDataSourceLocator &GetHasIDVariationLocator();

    /// Prim-level relative data source locator to locate subcomponentID.
    HDPRMAN_API
    static const HdDataSourceLocator &GetSubcomponentIDLocator();

    /// Prim-level relative data source locator to locate variationIdCodes.
    HDPRMAN_API
    static const HdDataSourceLocator &GetVariationIdCodesLocator();
    /// @} 

    /// \name Schema construction
    /// @{

    /// \deprecated Use Builder instead.
    ///
    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    HDPRMAN_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdContainerDataSourceHandle &assemblyDepth,
        const HdContainerDataSourceHandle &assemblyID,
        const HdContainerDataSourceHandle &componentID,
        const HdContainerDataSourceHandle &dustID,
        const HdContainerDataSourceHandle &gprimID,
        const HdContainerDataSourceHandle &hasIDVariation,
        const HdContainerDataSourceHandle &subcomponentID,
        const HdContainerDataSourceHandle &variationIdCodes
    );

    /// \class HdPrmanPrimvarIDVariationSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        HDPRMAN_API
        Builder &SetAssemblyDepth(
            const HdContainerDataSourceHandle &assemblyDepth);
        HDPRMAN_API
        Builder &SetAssemblyID(
            const HdContainerDataSourceHandle &assemblyID);
        HDPRMAN_API
        Builder &SetComponentID(
            const HdContainerDataSourceHandle &componentID);
        HDPRMAN_API
        Builder &SetDustID(
            const HdContainerDataSourceHandle &dustID);
        HDPRMAN_API
        Builder &SetGprimID(
            const HdContainerDataSourceHandle &gprimID);
        HDPRMAN_API
        Builder &SetHasIDVariation(
            const HdContainerDataSourceHandle &hasIDVariation);
        HDPRMAN_API
        Builder &SetSubcomponentID(
            const HdContainerDataSourceHandle &subcomponentID);
        HDPRMAN_API
        Builder &SetVariationIdCodes(
            const HdContainerDataSourceHandle &variationIdCodes);

        /// Returns a container data source containing the members set thus far.
        HDPRMAN_API
        HdContainerDataSourceHandle Build();

    private:
        HdContainerDataSourceHandle _assemblyDepth;
        HdContainerDataSourceHandle _assemblyID;
        HdContainerDataSourceHandle _componentID;
        HdContainerDataSourceHandle _dustID;
        HdContainerDataSourceHandle _gprimID;
        HdContainerDataSourceHandle _hasIDVariation;
        HdContainerDataSourceHandle _subcomponentID;
        HdContainerDataSourceHandle _variationIdCodes;

    };

    /// @}
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif
