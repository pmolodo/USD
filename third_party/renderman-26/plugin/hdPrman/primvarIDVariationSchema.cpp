//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "hdPrman/primvarIDVariationSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--

#include "pxr/imaging/hd/primvarSchema.h"

TF_DEFINE_PUBLIC_TOKENS(HdPrmanPrimvarIDVariationSchemaRiTokens,
                        HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_RI_TOKENS);

// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPrmanPrimvarIDVariationSchemaTokens,
    HD_PRMAN_PRIMVAR_IDVARIATION_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--

HdIntDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetAssemblyDepth() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->assemblyDepth));
    
    return HdIntDataSource::Cast(schema.GetPrimvarValue());
}

HdIntDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetAssemblyID() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->assemblyID));

    return HdIntDataSource::Cast(schema.GetPrimvarValue());
}

HdIntArrayDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetComponentID() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->componentID));

    return HdIntArrayDataSource::Cast(schema.GetPrimvarValue());
}

HdIntDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetDustID() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->dustID));

    return HdIntDataSource::Cast(schema.GetPrimvarValue());
}

HdIntDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetGprimID() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->gprimID));

    return HdIntDataSource::Cast(schema.GetPrimvarValue());
}

HdSampledDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetSubcomponentID() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->subcomponentID));

    return HdSampledDataSource::Cast(schema.GetPrimvarValue());
}

HdFloatArrayDataSourceHandle
HdPrmanPrimvarIDVariationSchema::GetVariationIdCodes() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->variationIdCodes));

    return HdFloatArrayDataSource::Cast(schema.GetPrimvarValue());
}

HdBoolDataSourceHandle
HdPrmanPrimvarIDVariationSchema::HasIDVariation() const
{
    HdPrimvarSchema schema(
        _GetTypedDataSource<HdContainerDataSource>(
            HdPrmanPrimvarIDVariationSchemaTokens->hasIDVariation));

    return HdBoolDataSource::Cast(schema.GetPrimvarValue());
}

// --(END CUSTOM CODE: Schema Methods)--

/*static*/
HdContainerDataSourceHandle
HdPrmanPrimvarIDVariationSchema::BuildRetained(
        const HdContainerDataSourceHandle &assemblyDepth,
        const HdContainerDataSourceHandle &assemblyID,
        const HdContainerDataSourceHandle &componentID,
        const HdContainerDataSourceHandle &dustID,
        const HdContainerDataSourceHandle &gprimID,
        const HdContainerDataSourceHandle &hasIDVariation,
        const HdContainerDataSourceHandle &subcomponentID,
        const HdContainerDataSourceHandle &variationIdCodes
)
{
    TfToken _names[8];
    HdDataSourceBaseHandle _values[8];

    size_t _count = 0;

    if (assemblyDepth) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->assemblyDepth;
        _values[_count++] = assemblyDepth;
    }

    if (assemblyID) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->assemblyID;
        _values[_count++] = assemblyID;
    }

    if (componentID) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->componentID;
        _values[_count++] = componentID;
    }

    if (dustID) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->dustID;
        _values[_count++] = dustID;
    }

    if (gprimID) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->gprimID;
        _values[_count++] = gprimID;
    }

    if (hasIDVariation) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->hasIDVariation;
        _values[_count++] = hasIDVariation;
    }

    if (subcomponentID) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->subcomponentID;
        _values[_count++] = subcomponentID;
    }

    if (variationIdCodes) {
        _names[_count] = HdPrmanPrimvarIDVariationSchemaTokens->variationIdCodes;
        _values[_count++] = variationIdCodes;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetAssemblyDepth(
    const HdContainerDataSourceHandle &assemblyDepth)
{
    _assemblyDepth = assemblyDepth;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetAssemblyID(
    const HdContainerDataSourceHandle &assemblyID)
{
    _assemblyID = assemblyID;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetComponentID(
    const HdContainerDataSourceHandle &componentID)
{
    _componentID = componentID;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetDustID(
    const HdContainerDataSourceHandle &dustID)
{
    _dustID = dustID;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetGprimID(
    const HdContainerDataSourceHandle &gprimID)
{
    _gprimID = gprimID;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetHasIDVariation(
    const HdContainerDataSourceHandle &hasIDVariation)
{
    _hasIDVariation = hasIDVariation;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetSubcomponentID(
    const HdContainerDataSourceHandle &subcomponentID)
{
    _subcomponentID = subcomponentID;
    return *this;
}

HdPrmanPrimvarIDVariationSchema::Builder &
HdPrmanPrimvarIDVariationSchema::Builder::SetVariationIdCodes(
    const HdContainerDataSourceHandle &variationIdCodes)
{
    _variationIdCodes = variationIdCodes;
    return *this;
}

HdContainerDataSourceHandle
HdPrmanPrimvarIDVariationSchema::Builder::Build()
{
    return HdPrmanPrimvarIDVariationSchema::BuildRetained(
        _assemblyDepth,
        _assemblyID,
        _componentID,
        _dustID,
        _gprimID,
        _hasIDVariation,
        _subcomponentID,
        _variationIdCodes
    );
}

/*static*/
HdPrmanPrimvarIDVariationSchema
HdPrmanPrimvarIDVariationSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPrmanPrimvarIDVariationSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPrmanPrimvarIDVariationSchemaTokens->primvars))
        : nullptr);
}

/*static*/
const TfToken &
HdPrmanPrimvarIDVariationSchema::GetSchemaToken()
{
    return HdPrmanPrimvarIDVariationSchemaTokens->primvars;
}

/*static*/
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetAssemblyDepthLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->assemblyDepth);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetAssemblyIDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->assemblyID);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetComponentIDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->componentID);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetDustIDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->dustID);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetGprimIDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->gprimID);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetHasIDVariationLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->hasIDVariation);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetSubcomponentIDLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->subcomponentID);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdPrmanPrimvarIDVariationSchema::GetVariationIdCodesLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdPrmanPrimvarIDVariationSchemaTokens->variationIdCodes);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE
